// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamServiceClient interface {
	Sum(ctx context.Context, opts ...grpc.CallOption) (StreamService_SumClient, error)
	Facb(ctx context.Context, in *FacbRequest, opts ...grpc.CallOption) (StreamService_FacbClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (StreamService_ChatClient, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Sum(ctx context.Context, opts ...grpc.CallOption) (StreamService_SumClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[0], "/stream.proto.StreamService/Sum", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceSumClient{stream}
	return x, nil
}

type StreamService_SumClient interface {
	Send(*SumRequest) error
	CloseAndRecv() (*SumResponse, error)
	grpc.ClientStream
}

type streamServiceSumClient struct {
	grpc.ClientStream
}

func (x *streamServiceSumClient) Send(m *SumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceSumClient) CloseAndRecv() (*SumResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) Facb(ctx context.Context, in *FacbRequest, opts ...grpc.CallOption) (StreamService_FacbClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[1], "/stream.proto.StreamService/Facb", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceFacbClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_FacbClient interface {
	Recv() (*FacbResponse, error)
	grpc.ClientStream
}

type streamServiceFacbClient struct {
	grpc.ClientStream
}

func (x *streamServiceFacbClient) Recv() (*FacbResponse, error) {
	m := new(FacbResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (StreamService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[2], "/stream.proto.StreamService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceChatClient{stream}
	return x, nil
}

type StreamService_ChatClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type streamServiceChatClient struct {
	grpc.ClientStream
}

func (x *streamServiceChatClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServiceServer is the server API for StreamService service.
// All implementations must embed UnimplementedStreamServiceServer
// for forward compatibility
type StreamServiceServer interface {
	Sum(StreamService_SumServer) error
	Facb(*FacbRequest, StreamService_FacbServer) error
	Chat(StreamService_ChatServer) error
	mustEmbedUnimplementedStreamServiceServer()
}

// UnimplementedStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (UnimplementedStreamServiceServer) Sum(StreamService_SumServer) error {
	return status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedStreamServiceServer) Facb(*FacbRequest, StreamService_FacbServer) error {
	return status.Errorf(codes.Unimplemented, "method Facb not implemented")
}
func (UnimplementedStreamServiceServer) Chat(StreamService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {}

// UnsafeStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServiceServer will
// result in compilation errors.
type UnsafeStreamServiceServer interface {
	mustEmbedUnimplementedStreamServiceServer()
}

func RegisterStreamServiceServer(s grpc.ServiceRegistrar, srv StreamServiceServer) {
	s.RegisterService(&StreamService_ServiceDesc, srv)
}

func _StreamService_Sum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).Sum(&streamServiceSumServer{stream})
}

type StreamService_SumServer interface {
	SendAndClose(*SumResponse) error
	Recv() (*SumRequest, error)
	grpc.ServerStream
}

type streamServiceSumServer struct {
	grpc.ServerStream
}

func (x *streamServiceSumServer) SendAndClose(m *SumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceSumServer) Recv() (*SumRequest, error) {
	m := new(SumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamService_Facb_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FacbRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).Facb(m, &streamServiceFacbServer{stream})
}

type StreamService_FacbServer interface {
	Send(*FacbResponse) error
	grpc.ServerStream
}

type streamServiceFacbServer struct {
	grpc.ServerStream
}

func (x *streamServiceFacbServer) Send(m *FacbResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).Chat(&streamServiceChatServer{stream})
}

type StreamService_ChatServer interface {
	Send(*ChatResponse) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type streamServiceChatServer struct {
	grpc.ServerStream
}

func (x *streamServiceChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceChatServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamService_ServiceDesc is the grpc.ServiceDesc for StreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.proto.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sum",
			Handler:       _StreamService_Sum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Facb",
			Handler:       _StreamService_Facb_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _StreamService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
